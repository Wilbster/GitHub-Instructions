{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the GitHub Tutorial","text":"<p>Hello there! This documentation will help your journey in understanding and learning how to use Github to create new projects and begin your journey as software developers using this essential technology.</p> <p>The following content will be talked about within this documentation</p> <ul> <li>Merging changes while working on a group project</li> <li>Creating issues using GitHub</li> <li>Adding, renaming, and moving files</li> </ul>"},{"location":"#intended-audience","title":"Intended Audience","text":"<p>This documentation is targeted towards the following audience:</p> <ul> <li>Beginner students who are starting their computer science journey</li> <li>Developers who have not used GitHub before</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>You require to have the following:</p> <ul> <li>A working Github account</li> <li>Ability to absorb information and follow instructions</li> <li>Visual Studio Code</li> </ul> <p>The screenshots provided will be using the GitHub website and the code blocks can be replicated using your own terminal on different IDEs.</p>"},{"location":"#overview-of-documentation","title":"Overview of Documentation","text":"<p>The following are the sections of the documentation:</p> <ul> <li>Merging changes</li> <li>Working with issues</li> <li>Adding, renaming, and moving files</li> </ul> <p>We would like to express our appreciation for utilizing our GitHub User Documentation Guide. </p>"},{"location":"AddingRenaming/","title":"File Management","text":""},{"location":"AddingRenaming/#overview","title":"Overview","text":"<p>Adding, renaming, and moving files are all processes that must be synchronized  between multiple clones of the same repository. </p> <p>Changes are staged and committed before being pushed  to a central repository stored online.</p>"},{"location":"AddingRenaming/#adding-a-file","title":"Adding a file","text":"<p>The command line can be used to add a file to a repository. </p> <p>Before this can be done, you must have a repository on GitHub that has been cloned locally on your computer.</p> <ol> <li>Move the file that you want to add to the directory that is your clone of the repository.</li> <li>Open Git Bash.</li> <li>Change the current working directory to your clone of the repository.</li> <li> <p>Stage the file for commit to your clone using:</p> <pre><code>$ git add . \n</code></pre> </li> <li> <p>Commit the file that you've staged in your local repository.</p> <pre><code>$ git commit -m \"commit message\"\n</code></pre> </li> <li> <p>Push the changes to GitHub.</p> <pre><code>$ git push origin YOUR_BRANCH\n</code></pre> </li> </ol>"},{"location":"AddingRenaming/#renaming-a-file","title":"Renaming a file","text":"<p>The command line can be used to rename any file in a repository. </p> <p>While many files can be renamed on the GitHub website, some types of files must be renamed from the command line. Images are one example.</p> <ol> <li> <p>Open Git Bash</p> </li> <li> <p>Change the current working directory to your repository.</p> </li> <li> <p>Rename the file with the following command. This will stage the change for commit.</p> <pre><code>$ git mv OLD-FILENAME NEW-FILENAME\n</code></pre> </li> <li> <p>Use the <code>git status</code> command to check the original and new file names.</p> <pre><code>$ git status\n&gt; # On branch YOUR-BRANCH\n&gt; # Changes to be committed:\n&gt; #   (use \"git reset HEAD ...\" to unstage)\n&gt; #\n&gt; #     renamed: OLD-FILENAME -&gt; NEW-FILENAME\n&gt; #\n</code></pre> </li> <li> <p>Commit the file.</p> <pre><code>$ git commit -m \"commit message: file renamed\"\n</code></pre> </li> <li> <p>Push the changes to GitHub.</p> <pre><code>$ git push origin YOUR_BRANCH\n</code></pre> </li> </ol>"},{"location":"AddingRenaming/#moving-a-file","title":"Moving a file","text":"<p>The command line can be used to move files within a repository by removing it from one location and then adding it to a new location.</p> <p>Some files, such as images, must be moved using the command line and cannot be on the GitHub site. </p> <ol> <li>Move the file to the new location within the directory using any method.</li> <li>Open Git Bash.</li> <li> <p>With the <code>git status</code> command, see that the old file location has been  \"deleted\" and that there is \"new\" file at the new location. In the following example, image.png has been moved from OLD-FOLDER to NEW-FOLDER.</p> <pre><code>$ git status\n&gt; # On branch YOUR-BRANCH\n&gt; # Changes not staged for commit:\n&gt; #   (use \"git add/rm ...\" to update what will be committed)\n&gt; #   (use \"git checkout -- ...\" to discard changes in working directory)\n&gt; #\n&gt; #     deleted:    /OLD-FOLDER/IMAGE.PNG\n&gt; #\n&gt; # Untracked files:\n&gt; #   (use \"git add ...\" to include in what will be committed)\n&gt; #\n&gt; #     /NEW-FOLDER/IMAGE.PNG\n&gt; #\n&gt; # no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> </li> <li> <p>Stage the file for commit using the <code>git add</code> command.</p> </li> <li> <p>Check the staged files using <code>git status</code>. In this example, IMAGE.PNG has been moved from OLD-FOLDER to NEW-FOLDER.</p> <pre><code>$ git status\n&gt; # On branch YOUR-BRANCH\n&gt; # Changes to be committed:\n&gt; #   (use \"git reset HEAD ...\" to unstage)\n&gt; #\n&gt; #    renamed:    /OLD-FOLDER/IMAGE.PNG -&gt; /NEW-FOLDER/IMAGE.PNG\n# Displays the changes staged for commit\n</code></pre> </li> <li> <p>Commit the staged file:</p> <pre><code>$ git commit -m \"commit message: moved IMAGE.PNG\"\n</code></pre> </li> <li> <p>Push the changes to GitHub:</p> <pre><code>$ git push origin YOUR_BRANCH\n</code></pre> </li> </ol>"},{"location":"AddingRenaming/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned:</p> <ul> <li>How to add a file to a GitHub repository. </li> <li>How to rename a file that is already part of a GitHub repository. </li> <li>How to move a file that is already part of a GitHub repository. </li> </ul>"},{"location":"MergeConflicts/","title":"Merge Conflicts","text":""},{"location":"MergeConflicts/#overview","title":"Overview","text":"<p>A merge conflict occurs when there are competing changes to a file from different  collaborators and the resolution is not obvious. </p> <p>If there are two different versions of a file when a repository merge is attempted but the  differences are edits on different lines, Git will resolve the difference automatically.</p> <p>Competing changes, however, are not resolved without input from the user. These include  changes to the same line from different collaborators, and when a file is edited by one  collaborator and deleted by another. </p> <p>Merge conflicts must be resolved before a pull request can be merged.</p>"},{"location":"MergeConflicts/#competing-line-changes","title":"Competing line changes","text":"<p>To resolve a competing line change merge conflict, the user has to choose which line change to  incorporate in a new commit. </p> <p>Attempting to merge branches with different edits on the same line results in a merge conflict error. The merge conflict must be resolved with a new commit before the merge can be completed.</p> <ol> <li>Open Git Bash.</li> <li> <p>Navigate to the repository that has the merge conflict(s).</p> <pre><code>cd REPOSITORY-NAME\n</code></pre> </li> <li> <p>Use the <code>$ git status</code> command to see the files affected by the merge conflict. In this example, the file  conflicted.md has a merge conflict.</p> <pre><code>$ git status\n&gt; # On branch branch-b\n&gt; # You have unmerged paths.\n&gt; #   (fix conflicts and run \"git commit\")\n&gt; #\n&gt; # Unmerged paths:\n&gt; #   (use \"git add ...\" to mark resolution)\n&gt; #\n&gt; # both modified:      conflicted.md\n&gt; #\n&gt; no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> </li> <li> <p>Navigate to the file with merge conflicts with a text editor like Visual Studio Code.</p> </li> <li> <p>Search the file for the conflict marker <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>. The changes from the base branch are shown right after the line <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>. After these changes, <code>=======</code> divides them from the changes in the other branch. In the following  example, \"CHANGE ONE\" is what was written in the base branch and \"CHANGE 2\" is what was written in the compare branch.</p> <pre><code>Here is the change:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nCHANGE ONE\n=======\nCHANGE 2\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-a\n</code></pre> </li> <li> <p>Decide if you want to keep one of the changes or make a new change. Delete the conflict markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> and make the final changes that you want. In the following example, \"BOTH CHANGES\" is made the final edit  instead:</p> <pre><code>BOTH CHANGES\n</code></pre> </li> <li> <p>Add or stage your changes.</p> <pre><code>$ git add . \n</code></pre> </li> <li> <p>Commit your changes.</p> <pre><code>$ git commit -m \"commit message\" \n</code></pre> </li> </ol>"},{"location":"MergeConflicts/#removed-file","title":"Removed file","text":"<p>If a file is deleted in one branch and edited in another branch to result in a merge conflict, the user must choose  whether to delete or to keep the file with a new commit before the branches can be merged. </p> <ol> <li>Open Git Bash</li> <li> <p>Navigate to the Git repository with the merge conflict. </p> <pre><code>cd REPOSITORY-NAME\n</code></pre> </li> <li> <p>Use the <code>$git status</code> command to see the files affected by the merge conflict. In the following example, the file  DELETED.md has a merge conflict. </p> <pre><code>$ git status\n&gt; # On branch main\n&gt; # Your branch and 'origin/main' have diverged,\n&gt; # and have 1 and 2 different commits each, respectively.\n&gt; #  (use \"git pull\" to merge the remote branch into yours)\n&gt; # You have unmerged paths.\n&gt; #  (fix conflicts and run \"git commit\")\n&gt; #\n&gt; # Unmerged paths:\n&gt; #  (use \"git add/rm ...\" as appropriate to mark resolution)\n&gt; #\n&gt; #    deleted by us:   DELETED.md\n&gt; #\n&gt; # no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> </li> <li> <p>Navigate to the file in a text editor like Visual Studio Code.</p> </li> <li> <p>Decide whether to keep the removed file. You may view the edits that were made to the file in the text editor.</p> <p>To keep the file:  <pre><code>$ git add DELETED.md\n</code></pre> To remove the file: <pre><code>$ git rm README.md\n &gt; README.md: needs merge\n &gt; rm 'README.md'\n</code></pre></p> </li> <li> <p>Commit the changes made. </p> <pre><code>$ git commit -m \"commit message\"\n&gt; [branch-d 6f89e49] Merge branch 'branch-c' into branch-d\n</code></pre> </li> </ol>"},{"location":"MergeConflicts/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned:</p> <ul> <li>How to resolve a merge conflict with competing line changes. </li> <li>How to resolve a merge conflict with a file that has been edited and deleted. </li> </ul>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Branch A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process. Bugs An error, fault, or flaw in any computer program or a hardware system. Comment A brief explanation of the changes that have been made. Commit To capture a snapshot of the current staged changes. IDE IDE represents integrated development environment. It is a software application that helps programmers develop software code efficiently. Merge To combine branches together. Repository A repository contains all of your project's files and each file's revision history. Stage To save a file in your local machine to prepare to commit it."},{"location":"issues/","title":"Issues","text":""},{"location":"issues/#overview","title":"Overview","text":"<p>In this section we will be going over how to utilize Github issues to create a new issue as well as other various features that it offers. It is a powerful tool that allows users to keep track of their progress and issues that they may encounter in a work environment.</p> <p>Github issue is a tool where users can track and manage tasks associated with a project. It is commonly utilized to report bugs, ask for features, or suggest modifications to a project.</p> <p>The issue is created by any user and it can contain a title, description, and other information including labels, assignees, and milestones</p> <ul> <li><code>labels</code> : used to categorize issues</li> <li><code>assignees</code> : people responsible for resolving the issue</li> <li><code>milestones</code> : used to group similar issues together and track the progress towards a larger goal</li> </ul>"},{"location":"issues/#creating-new-github-issues","title":"Creating new Github issues","text":"<p>If we would like to create a new Github issue, we can take the following steps:</p> <ol> <li>Navigate to the main repository where you would like to create a new issue.</li> <li> <p>Click on the issues tab in the repository menu.</p> <p></p> </li> <li> <p>Click on the green New issue button on the right-hand side.</p> <p></p> </li> <li> <p>Fill out the title and description fields of the issue. </p> </li> <li><code>title</code> : should convey a brief summary about what the issue is</li> <li><code>description</code> : should explain the the purpose of the issue and any details that might help resolve the issue.</li> <li> <p>Click on the green Submit New Issue button to create a new issue.</p> <p></p> <p>As mentioned earlier, you can add labels, milestones, and assign issues.</p> </li> </ol>"},{"location":"issues/#adding-labels","title":"Adding labels","text":"<p>You can add labels by clicking on the small cog icon on the right menu bar. You are able to use either a predefined label or create your own customized label so that it is easier for you to identify issues at a later date. </p> <p></p> <p>Users can then use these labels to filter issues and find all issues that have a specific label.</p> <p>For more information, please reference the documentation</p>"},{"location":"issues/#adding-milestones","title":"Adding milestones","text":"<p>You can add milestones by clicking on the small cog icon on the right menu bar. A milestone lets you keep track of the progress through a date-based approach. It will show the progress of the task as the target date approaches.</p> <p></p> <p>For more information, please reference the documentation</p>"},{"location":"issues/#adding-assignees","title":"Adding assignees","text":"<p>You can add assignees to a task by clicking on the small cog icon on the right menu bar. An assignee can be specified so that users are able to track who is responsible for fixing a certain issue.</p> <p></p> <p>For more information, please reference the documentation</p>"},{"location":"issues/#commenting-on-an-issue","title":"Commenting  on an Issue","text":"<p>If we would like to comment on a Github issue, we can take the following steps:</p> <ol> <li>Navigate to the issue you would like to comment on.</li> <li>Scroll down to the comment text field.</li> <li> <p>Type your comment in the text field.</p> </li> <li> <p>Click on the green Comment button to post your comment.</p> </li> </ol> <p></p>"},{"location":"issues/#closing-an-issue","title":"Closing an Issue","text":"<p>If we would like to close a Github issue, we can take the following steps:</p> <ol> <li> <p>Navigate to the issue you would like to close.</p> </li> <li> <p>Optionally, you can leave a comment explaining why you are closing the issue.</p> </li> <li>Click on the Close issue button with the purple check mark to close the issue.</li> </ol> <p></p>"},{"location":"issues/#reopening-an-issue","title":"Reopening an Issue","text":"<p>If we would like to reopen a Github issue, we can take the following steps:</p> <ol> <li> <p>Navigate to the closed issue you want to reopen.</p> </li> <li> <p>Optionally, you can leave a comment explaining why you are reopening the issue.</p> </li> <li>Click on the Reopen issue button with the purple check mark to reopen the issue.</li> </ol> <p></p>"},{"location":"issues/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned:</p> <ul> <li>How to create, comment, close, and reopen an issue.</li> <li>How to add labels, milestones, and assignees to an issue.</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Unable to commit your changes File that you were working on had changes made to it Use <code>git pull</code> to pull the changes first and resolve the merge issue before trying to commit your changes. You did not add your files before trying to commit them. use the command <code>git add &lt;filename&gt;</code> before trying to commit changes. You used the wrong command to commit. Use the command <code>git commit -m \"&lt;your comment here&gt;\"</code> to commit your changes. Merge failed to resolve There is a conflict between your local branch and the branch being merged. Check the file that has a merge conflict using <code>git status</code> and decide on whether to discard changes or keep them within the file and use <code>git commit</code> afterwards to save changes."}]}